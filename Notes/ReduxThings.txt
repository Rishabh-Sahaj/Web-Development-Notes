/*
Every Reducer takes current state (which it takes from store) & action (which comes from outside of store) and returns new state.
The Reducer which is passed to createStore() also returns new state and then the state(statetree) of the store is this new state reurned by this reducer. 

When store is created this reducer is automatically called with a action (dummy action) also coming from the store. As the current state (tree) is initially undefined this reducer is called with undefined current state and dummy action as parameters and then returns new state, then the state-tree is this new state returned by the reducer. 

We can set this undefined current state to something by mentioning its value in createStore() as 2nd parameter. Means We want to build our Initial state tree not ON THE BASIS of undefined but some value. 

NOTE: Initial State (tree) of the store is not the initial state we pass to cratestore() but what is returned by the reducer passed to the createStore() when it is called for the first time automatically. 

THE INITIAL STATE WE PASS TO THE createStore() JUST SERVES AS FIRST PARAMETER (current state parameter) TO THE REDUCER FOR IT TO RETURN AND SET THE INITIAL STATE OF THE STORE TO THE RETURNED VALUE, WHEN AUTOMATICALLY CALLED FOR THE FIRST TIME. 

IF INITIAL STATE IS NOT PASSED TO createStore(), REDUCER FIRST CALL TAKES undefined AS STATE PARAMETER AND SET INITIAL STATE OF STORE ACCORDINGLY. 

THE INITIAL STATE PARAMETER WE PASS TO THE createStore() IS ACTUALLY THE BASE ON WHICH WE WANT THE ACTUAL INITIAL STATE OF THE STORE TO BE.
*/
const store = createStore(combined, { a: 'horse' });
console.log(store.getState()); // { a: 'horse', b: 'wat' }

-----------------------------------------------------------
//Two reducers:
-----------------------------------------------------------
function a(state = 'lol', action) {
  return state
}

function b(state = 'wat', action) {
  return state
}
-------------------------------------------------------------------
// const combined = combineReducers({ a, b })
//The reducer generated by combineReducers({ a, b }) looks like this:
----------------------------------------------------------------------
function combined(state = {}, action) {
  return {
    a: a(state.a, action),
    b: b(state.b, action)
  }
}

[URL - https://redux.js.org/recipes/structuring-reducers/initializing-state]